//{"type":"FeatureCollection","features":[{"type":"Feature","properties":{"fclass":"forest"},"geometry":{"type":"Polygon","coordinates":[[[8.6960117,47.5035179],[8.6961995,47.5035303],[8.6964268,47.5035453],[8.6967225,47.5035649],[8.6967036,47.5039345],[8.6969061,47.5044185],[8.6961208,47.504686],[8.6965742,47.505063],[8.6967016,47.5050731],[8.6967752,47.5051112],[8.6966845,47.5052743],[8.6966214,47.5053224],[8.6975346,47.505185],[8.6976019,47.5053287],[8.6978652,47.5053051],[8.6987498,47.5051856],[8.69943,47.5051667],[8.6996005,47.5051847],[8.6997028,47.5052537],[8.6999115,47.5055307],[8.7001359,47.5054913],[8.7005007,47.5055303],[8.7009536,47.5055171],[8.701334,47.5054377],[8.7016137,47.5053454],[8.7020973,47.5053378],[8.7032604,47.5049772],[8.7034461,47.505016],[8.7035065,47.5048491],[8.7044776,47.5045516],[8.7050386,47.5044756],[8.7052862,47.5047334],[8.7055552,47.5050213],[8.7062023,47.5057503],[8.7064376,47.505705],[8.7065964,47.5056982],[8.7068902,47.5057016],[8.7069907,47.5056958],[8.7073123,47.5050998],[8.7075849,47.5046401],[8.7088314,47.5034005],[8.7093668,47.5031714],[8.7098747,47.5029323],[8.7102378,47.5028428],[8.7102561,47.5024449],[8.7105662,47.5022959],[8.7103457,47.5021373],[8.7104037,47.5020424],[8.7105057,47.501922],[8.7128318,47.5008485],[8.7131569,47.5005557],[8.7143156,47.4995583],[8.7146135,47.4993483],[8.7147925,47.499252],[8.7148352,47.499231],[8.7148862,47.4992068],[8.7149589,47.4991733],[8.7145063,47.4991115],[8.7136037,47.4995555],[8.7129259,47.4998307],[8.7120159,47.4999846],[8.7113281,47.499632],[8.7113036,47.4996078],[8.7111571,47.4994632],[8.711088,47.4993682],[8.710988,47.4994038],[8.7110246,47.4996169],[8.7098773,47.5000987],[8.7091667,47.5002411],[8.7085478,47.4998094],[8.7083139,47.4996896],[8.7078667,47.4998883],[8.7070985,47.500019],[8.7067659,47.5002944],[8.7065299,47.5003234],[8.7058218,47.4998885],[8.7055213,47.4999465],[8.7054826,47.4998925],[8.705256,47.4995325],[8.7051139,47.4994629],[8.7049347,47.4994458],[8.7045817,47.4995132],[8.704804,47.4997261],[8.7049415,47.4999542],[8.7041481,47.5003887],[8.7039122,47.5003082],[8.7037122,47.5001738],[8.7033383,47.499941],[8.7032297,47.4998557],[8.7031128,47.4996338],[8.7030017,47.499517],[8.7025225,47.4998076],[8.7011664,47.500631],[8.6988454,47.500084],[8.698703,47.5001208],[8.6984735,47.5000705],[8.6984482,47.5001337],[8.6988488,47.5003366],[8.6989553,47.5005916],[8.700586,47.5009595],[8.7003768,47.5012552],[8.7002388,47.5014545],[8.7002584,47.5015678],[8.7005432,47.5017513],[8.6997814,47.5020195],[8.699092,47.5017308],[8.6989385,47.5017546],[8.6987196,47.50164],[8.6985519,47.501503],[8.6980978,47.5012124],[8.6976304,47.5011729],[8.6974499,47.5012341],[8.6973544,47.5013178],[8.6971634,47.5015368],[8.6969819,47.5017744],[8.6974409,47.5020317],[8.6970731,47.5023732],[8.6966857,47.5026236],[8.6966259,47.5026663],[8.6964841,47.5028229],[8.6961796,47.5031534],[8.6960117,47.5035179]]]}}]}

(function() {

  function toGeoJSON(pgons) {
    return {
      "type": "FeatureCollection",
      "features": pgons.map(multi => {
        return {
          "type": "Feature",
          "properties": {},
          "geometry": {
            "type": "MultiPolygon",
            "coordinates": multi.map(simple => {
              return simple.map(coords => {
                return coords.map(({lng, lat}) => {
                  return [lng, lat];
                })
              }).reduce((xs, y) => xs.concat(y));
            })
          }
        }
      })
    };
  }

  LeafletWidget.methods.addGlifyPolygons = function(data, cols, popup, opacity, group) {

    //console.log('data=', data);
    //console.log('data=', toGeoJSON(data));

    window.geojs = toGeoJSON(data);

    // popup argument should be the same length as data
    // popup = null, same # elements, some other length
    // shorter = recycle (helper functions in JS)
    var map = this;
      var shapeslayer = L.glify.shapes({
        map: map,
        data: window.geojs,
        className: group,
        click: function(e) {
          // Instead of indexing into geojson feature properties, just indexes into data
          // can use modular arith to cycle instead of using DataFrame stuff from leaflet maybe
        }
      });

    map.layerManager.addLayer(shapeslayer.glLayer, null, null, group);

  };
})();